(define (union set1 set2)
    (define (iter result set1 set2)
        (cond ((null? set1) (append result set2))
              ((null? set2) (append result set1))
              ((< (car set1) (car set2)) (iter (append result (list (car set1))) (cdr set1) set2))
              ((> (car set1) (car set2)) (iter (append result (list (car set2))) set1 (cdr set2)))
              (else (iter (append result (list (car set1))) (cdr set1) (cdr set2)))))
    (iter '() set1 set2))

(newline) (display (union '(1 2 3 4) '(5 6 7)))         ; (1 2 3 4 5 6 7)
(newline) (display (union '(5 6 7) '(1 2 3 4)))         ; (1 2 3 4 5 6 7)
(newline) (display (union '(1 5 6 7) '(1 2 3 4 5 8)))   ; (1 2 3 4 5 6 7 8)